{"version":3,"sources":["services/api.js","redux/userDuck.js","components/common/Navbar.jsx","components/auth/Login.jsx","components/auth/Register.jsx","components/home/Home.jsx","Routes.js","App.js","serviceWorker.js","redux/appDuck.js","redux/store.js","index.js"],"names":["url","initialData","fetching","info","error","logged","Cookies","get","reducer","state","action","type","payload","connect","user","logout","dispatch","axios","post","remove","className","to","src","alt","onClick","login","userData","data","then","res","set","token","maxAge","userInfo","catch","err","response","history","useState","setData","handleSubmit","email","test","toLowerCase","password","message","warning","handleData","e","target","name","value","useEffect","status","success","push","suffix","UserOutlined","onChange","placeholder","Password","iconRender","visible","EyeTwoTone","EyeInvisibleOutlined","onKeyPress","key","loading","style","color","marginTop","signup","signupData","size","PrivateRoute","path","component","remainingProps","AuthRoute","checkSession","jwt","exact","Home","Login","Register","Content","Layout","App","Boolean","window","location","hostname","match","language","rootReducer","combineReducers","app","appReducer","userReducer","middlewares","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","thunk","process","createStore","applyMiddleware","store","generateStore","WithRouter","WithStore","WithCookies","CookiesProvider","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.fca9d29d.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n// let url = 'http://localhost:3000'\r\nlet url = 'https://app.puntapiedra.com'\r\n\r\n// AUTH\r\nexport let signup = data => axios.post(`${url}/auth/signup`, data)\r\nexport let login = data => axios.post(`${url}/auth/login`, data)\r\nexport let token = data => axios.post(`${url}/auth/token`, data)\r\nexport let logout = () => axios.post(`${url}/auth/logout`)","import { signup, login, logout, token, codeCheck, checkPasswordCode, changePass } from \"../services/api\"\r\nimport { Cookies } from \"react-cookie\"\r\n\r\nlet initialData = {\r\n    fetching: true,\r\n    info: {},\r\n    error: {},\r\n    logged: new Cookies().get('id') ? true : false\r\n}\r\n\r\nlet LOGIN = 'LOGIN'\r\nlet LOGIN_SUCCESS = 'LOGIN_SUCCESS'\r\nlet LOGIN_ERROR = 'LOGIN_ERROR'\r\n\r\nlet SIGNUP = 'SIGNUP'\r\nlet SIGNUP_SUCCESS = 'SIGNUP_SUCCESS'\r\nlet SIGNUP_ERROR = 'SIGNUP_ERROR'\r\n\r\nlet LOGOUT = 'LOGOUT'\r\n\r\nlet CHECK_SESSION = 'CHECK_SESSION'\r\n\r\nlet reducer = (state = initialData, action) => {\r\n    switch(action.type){\r\n\r\n        case LOGIN:\r\n            return {...state, fetching: true, info: initialData.info, error: {}}\r\n        case LOGIN_SUCCESS:\r\n            return {...state, fetching: false}\r\n        case LOGIN_ERROR:\r\n            return {...state, fetching: false, error: action.payload, info: {}}\r\n\r\n        case SIGNUP:\r\n            return {...state, fetching: true, info: initialData.info, error: {}}\r\n        case SIGNUP_SUCCESS:\r\n            return {...state, fetching: false}\r\n        case SIGNUP_ERROR:\r\n            return {...state, fetching: false, error: action.payload, info: {}}\r\n\r\n        case LOGOUT:\r\n            return {...state, info: initialData.info, logged: false}\r\n        case CHECK_SESSION:\r\n            return {...state, logged: action.payload.logged, info: action.payload.info, fetching: action.payload.fetching}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport default reducer\r\n\r\nexport let signupAction = signupData => dispatch => {\r\n    dispatch({\r\n        type: SIGNUP\r\n    })\r\n    signup(signupData)\r\n        .then(res => {\r\n            let { data } = res\r\n            new Cookies().set('id', data.token, {maxAge: 60 * 60 * 24})\r\n            new Cookies().set('user', data.userInfo, {maxAge: 60 * 60 * 24})\r\n            dispatch({\r\n                type: SIGNUP_SUCCESS\r\n            })\r\n            dispatch({\r\n                type: CHECK_SESSION,\r\n                payload: {logged: true, info: data.userInfo, fetching: false}\r\n            })\r\n        })\r\n        .then(token({email: signupData.email}))\r\n        .catch(err => dispatch({\r\n            type: SIGNUP_ERROR,\r\n            payload: err.response\r\n        }))\r\n}\r\n\r\nexport let checkSessionAction = () => dispatch => {\r\n    let jwt = new Cookies().get('id')\r\n    let user = new Cookies().get('user')\r\n    if(jwt){ \r\n        user && dispatch({\r\n            type: CHECK_SESSION,\r\n            payload: {logged: true, info: user, fetching: false}\r\n        })\r\n        return\r\n    }\r\n    return dispatch({\r\n        type: CHECK_SESSION,\r\n        payload: {logged: false, info: {}, fetching: false}\r\n    })\r\n}\r\n\r\nexport let loginAction = userData => dispatch => {\r\n    dispatch({\r\n        type: LOGIN\r\n    })\r\n    login(userData)\r\n        .then(res => {\r\n            let { data } = res\r\n            new Cookies().set('id', data.token, {maxAge: 60 * 60 * 24})\r\n            new Cookies().set('user', data.userInfo, {maxAge: 60 * 60 * 24})\r\n            dispatch({\r\n                type: LOGIN_SUCCESS\r\n            })\r\n            dispatch({\r\n                type: CHECK_SESSION,\r\n                payload: {logged: true, info: data.userInfo, fetching: false}\r\n            })\r\n        })\r\n        .catch(err => dispatch({\r\n            type: LOGIN_ERROR,\r\n            payload: err.response\r\n        }))\r\n}\r\n\r\nexport let logoutAction = () => dispatch => {\r\n    logout()\r\n    new Cookies().remove('id')\r\n    new Cookies().remove('user')\r\n    dispatch({\r\n        type: LOGOUT\r\n    })\r\n}","import React from 'react'\r\nimport { PageHeader } from 'antd'\r\nimport { connect } from 'react-redux'\r\nimport { logoutAction } from '../../redux/userDuck'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Navbar = ({logged, logout}) => {\r\n\r\n    return (\r\n        <>\r\n            {\r\n                logged ? \r\n                    <PageHeader className='navbar-container'>\r\n                        <Link to='/'><img src=\"/logo.png\" alt=\"Logo\"/></Link>\r\n                        <ul>\r\n                            <li><Link to='/'>Inicio</Link></li>\r\n                            <li onClick={logout}>Logout</li>\r\n                        </ul>\r\n                    </PageHeader>\r\n                :\r\n                    null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nlet mapState = ({user: {logged}}) => ({logged})\r\n\r\nexport default connect(\r\n    mapState,\r\n    {\r\n        logout: logoutAction\r\n    }\r\n)(Navbar)","import React, { useState, useEffect } from 'react'\r\nimport { Input, Button, message } from 'antd'\r\nimport { EyeInvisibleOutlined, EyeTwoTone, UserOutlined } from '@ant-design/icons'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { loginAction } from '../../redux/userDuck'\r\n\r\nlet Login = ({history, info, fetching, error, login}) => {\r\n\r\n    let [data, setData] = useState({})\r\n\r\n    let handleEnter = e => e.key === 'Enter' && handleSubmit()\r\n\r\n    let handleSubmit = () => {\r\n        let rex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        if(!data.email || !rex.test(data.email.toLowerCase())) return message.warning('Ingresa un correo válido')\r\n        if(!data.password) return message.error('Contraseña incorrecta')\r\n        login(data)\r\n    }\r\n\r\n    let handleData = e => setData({...data, [e.target.name]: e.target.value})\r\n\r\n    useEffect(() => {\r\n        if(error.status === 403) return message.error('Contraseña incorrecta')\r\n        if(error.status === 500) return message.error('No pudimos completar tu solicitud')\r\n        if(info.name){\r\n            message.success('Inicio de sesión correcto')\r\n            history.push('/app')\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[info, error])\r\n\r\n    return (\r\n        <div className='auth-container'>\r\n            <div className=\"language-fixed\">\r\n                <p>ES</p>\r\n                <p>EN</p>\r\n            </div>\r\n            <div className=\"auth-logo\">\r\n                <img src=\"/logo.png\" alt=\"ataho logo\"/>\r\n            </div>\r\n            <div className=\"auth-inputs\">\r\n                <h2>Iniciar sesión</h2>\r\n                <Input suffix={<UserOutlined />} onChange={handleData} name='email' placeholder='Correo'/>\r\n                <Input.Password iconRender={visible => visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />} onChange={handleData} onKeyPress={handleEnter} name='password' placeholder='Contraseña'/>\r\n                <Button loading={fetching} type='primary' onClick={handleSubmit}>Entrar</Button>\r\n                <Link style={{color: 'white', marginTop: '1rem'}} to='/register'><small>Crea una cuenta</small></Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapState = ({user: {info, fetching, error}}) => ({info, fetching, error})\r\n\r\nexport default connect(\r\n    mapState,\r\n    {\r\n        login: loginAction\r\n    }\r\n)(Login)","import React, { useEffect, useState } from 'react'\r\nimport { Input, Button, message } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { signupAction } from '../../redux/userDuck'\r\n\r\nlet Register = ({error, info, signup, history}) => {\r\n\r\n    let [data, setData] = useState({})\r\n\r\n    let handleData = e => {\r\n        setData({...data, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    let handleSubmit = () => signup(data)\r\n\r\n    useEffect(() => {\r\n        if(error.status === 500) return message.error('Ingresa todos los campos')\r\n        if(info.name){\r\n            message.success('Inicio de sesión correcto')\r\n            history.push('/')\r\n        }\r\n    }, [error])\r\n\r\n    return (\r\n        <div className='auth-container'>\r\n            <div className=\"auth-logo\">\r\n                <img src=\"/logo.png\" alt=\"ataho logo\"/>\r\n            </div>\r\n            <div className=\"auth-inputs\">\r\n                <h2>Registro de usuario</h2>\r\n                <Input onChange={handleData} name='name' placeholder='Nombre'/>\r\n                <Input onChange={handleData} name='email' placeholder='Correo'/>\r\n                <Input onChange={handleData} name='password' placeholder='Contraseña'/>\r\n                <Button type='primary' onClick={handleSubmit}>Registrar</Button>\r\n                <Link style={{color: 'white', marginTop: '1rem'}} to='/'><small>Regresar</small></Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapState = ({user: {error, info}}) => ({error, info})\r\n\r\nexport default connect(\r\n    mapState,\r\n    {\r\n        signup: signupAction\r\n    }\r\n)(Register)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Spin } from 'antd'\r\n\r\nlet Home = ({fetching, name}) => {\r\n\r\n    return (\r\n        <div className='padding-container home-container'>\r\n            {\r\n                fetching ? \r\n                    <div className='spinner-full-page'><Spin size='large'/></div>\r\n                    :\r\n                    <h1>Punta Piedra {name}</h1>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapState = ({user: {fetching, info: {name}}}) => ({fetching, name})\r\n\r\nexport default connect(\r\n    mapState,\r\n    {\r\n        \r\n    }    \r\n)(Home)","import React, { useEffect } from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { checkSessionAction } from './redux/userDuck'\r\nimport Login from './components/auth/Login'\r\nimport Register from './components/auth/Register'\r\nimport Home from './components/home/Home'\r\n\r\nlet PrivateRoute = ({logged, path, component, ...remainingProps}) => {\r\n    if(logged) return <Route path={path} component={component} {...remainingProps}/>\r\n    return <Redirect to='/login' {...remainingProps}/>\r\n}\r\n\r\nlet AuthRoute = ({logged, path, component, ...remainingProps}) => {\r\n    if(logged) return <Redirect to='/' {...remainingProps}/>\r\n    return <Route path={path} component={component} {...remainingProps}/> \r\n}\r\n\r\nlet Routes = ({logged, checkSession}) => {\r\n\r\n    useEffect(() => {\r\n        checkSession()\r\n        // eslint-disable-next-line\r\n    },[])\r\n\r\n    return <Switch>\r\n        <PrivateRoute exact path='/' logged={logged} component={Home}/>\r\n        <AuthRoute path='/login' logged={logged} component={Login}/>\r\n        <AuthRoute path='/register' logged={logged} component={Register}/>\r\n    </Switch>\r\n}\r\n\r\nlet mapState = ({user: {logged}}) => ({logged})\r\n\r\nexport default connect(\r\n    mapState,\r\n    {\r\n        checkSession: checkSessionAction\r\n    }\r\n)(Routes)","import React from 'react';\nimport Navbar from './components/common/Navbar';\nimport Routes from './Routes';\nimport { Layout } from 'antd';\nconst { Content } = Layout\n\nfunction App() {\n  return (\n    <Layout>\n      <Navbar/>\n      <Content>\n        <Routes/>\n      </Content>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Cookies } from \"react-cookie\"\r\n\r\nlet initialData = {\r\n    language: 'ES'\r\n}\r\n\r\nlet CHANGE_LANG = 'CHANGE_LANG'\r\n\r\nlet reducer = (state = initialData, action) => {\r\n    switch(action.type){\r\n        case CHANGE_LANG:\r\n            return {...state, language: action.payload}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport default reducer\r\n\r\nexport let changeLangAction = lang => dispatch => {\r\n    new Cookies().set('language', lang)\r\n    dispatch({\r\n        type: CHANGE_LANG,\r\n        payload: lang\r\n    })\r\n}","import { createStore, combineReducers, compose, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport userReducer from './userDuck'\r\nimport appReducer from './appDuck'\r\n\r\nlet rootReducer = combineReducers({\r\n    app: appReducer,\r\n    user: userReducer\r\n})\r\n\r\nlet composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nlet middlewares = [thunk]\r\n\r\nlet generateStore = () => createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(...middlewares))\r\n)\r\n\r\nlet generateStoreProduction = () => createStore(\r\n    rootReducer,\r\n    applyMiddleware(...middlewares)\r\n)\r\n\r\nexport default process.env.NODE_ENV === 'development' ? generateStore : generateStoreProduction","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\nimport { CookiesProvider } from 'react-cookie'\nimport { Provider } from 'react-redux'\nimport generateStore from './redux/store'\nimport 'antd/dist/antd.css';\nimport './styles.css';\nlet store = generateStore()\n\nlet WithRouter = () => <BrowserRouter><App/></BrowserRouter>\nlet WithStore = () => <Provider store={store}><WithRouter/></Provider>\nlet WithCookies = () => <CookiesProvider><WithStore/></CookiesProvider>\n\nReactDOM.render(\n    <WithCookies/>, document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}